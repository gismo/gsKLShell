namespace gismo
{

/** \defgroup KLShell Kirchhoff-Love shell module
\ingroup Modules

This module is about solving elasticity problems on thin shells using the Kirchhoff-Love shell formulations. References for this implementation include the original work by Kiendl et. al. (2009) [I], the PhD thesis of Josef Kiendl (2011) [II], the PhD thesis of Anmol Goyal (2015) [III], the MSc thesis of Hugo Verhelst (2019) [IV]. Anmol contributed to the first Kirchhoff-Love implementation of G+Smo and Hugo to the current one.

\subsection klShell_Equations Governing Equations

The variational formulation for the Kirchhoff-Love shell is:
\f{eqnarray*}{
    \int_\Omega \mathbf{f}\cdot\mathbf{v}\ + p\mathbf{\hat{n}}:\text{d}\Omega - \int_\Omega \mathbf{n}(\mathbf{u}):\mathbf{\varepsilon}^\prime(\mathbf{u},\mathbf{v}) + \mathbf{m}(\mathbf{u}):\mathbf{\kappa}^\prime(\mathbf{u},\mathbf{v}) \text{d}\Omega = 0
\f}

The left-hand side of this formulation in fact is the residual of the problem, being the balance between external and internal forces. In this equation, \f$\Omega\f$ is the domain, \f$ \mathbf{f} \f$ is a vector with a distributed load acting on the mid-plane of the shell, \f$ \mathbf{v} \f$ is the three-dimensional test function, \f$ p\f$ is a follower pressure acting on the shell, \f$ \mathbf{\hat{n}}\f$ is the shell normal, \f$ n \f$ is the normal-force tensor, \f$ \mathbf{\varepsilon}^\prime \f$ is the variation of the membrane strain tensor, \f$ \mathbf{m} \f$ is the bending moment tensor, \f$ \mathbf{\kappa}^\prime \f$ is the variation of the bending strain tensor and \f$\mathbf{u} \f$ is the displacement of the mid-plane of the shell; thus the solution to the problem.

In order to solve the variational formulation for \f$ \mathbf{u} \f$, the second variation is derived, such that a lineararized form can be found or such that the Jacobian and for Newton iterations can be found. The second variation is:

 \f{eqnarray*}{
    j(\mathbf{u},\mathbf{v},\mathbf{w}) = \int_\Omega \mathbf{n}(\mathbf{u}):\mathbf{\varepsilon}^{\prime\prime}(\mathbf{u},\mathbf{v},\mathbf{v}) + \mathbf{n}^\prime(\mathbf{u},\mathbf{v}):\mathbf{\varepsilon}^{\prime}(\mathbf{u},\mathbf{v}) + \mathbf{m}(\mathbf{u}):\mathbf{\kappa}^{\prime\prime}(\mathbf{u},\mathbf{v},\mathbf{w}) + \mathbf{m}^\prime(\mathbf{u},\mathbf{v}):\mathbf{\kappa}^\prime(\mathbf{u},\mathbf{v}) \text{d}\Omega - \int_\Omega p \mathbf{v}\cdot\mathbf{\hat{n}}^\prime\text{d}\Omega
\f}

In this equation, the primed (\f$\cdot^\prime\f$) expressions again denote the first variation and the double-primed (\f$\cdot^{\prime\prime}\f$) expressions denote second variations.

From the above equations, a system of equations can be assembled, which will later be done by the \ref gsExprAssembler . In case of a lineararized system, only the single-primed expressions are non-zero, together with the term containing the external load.

The expressions for the strains, normal foce and bending moment are as follows (see sec. 3.2 and 3.3 of [III]):
\f{align*}{
    \varepsilon_{\alpha\beta} &= \frac{\partial\mathbf{c}}{\partial\theta_\alpha}\cdot\frac{\partial\mathbf{c}}{\partial\theta_\beta} - \frac{\partial\mathbf{C}}{\partial\theta_\alpha}\cdot\frac{\partial\mathbf{C}}{\partial\theta_\beta}\\
    \varepsilon^\prime_{\alpha\beta} &= \frac{1}{2}\frac{\partial\mathbf{v}}{\partial\theta_\alpha}\cdot\frac{\partial\mathbf{c}}{\partial\theta_\beta} + \frac{1}{2}\frac{\partial\mathbf{c}}{\partial\theta_\alpha}\cdot\frac{\partial\mathbf{v}}{\partial\theta_\beta} \\
    \kappa_{\alpha\beta} &= \frac{\partial^2\mathbf{C}}{\partial\theta_\alpha\partial\theta_\beta}\cdot\mathbf{\hat{N}} - \frac{\partial^2\mathbf{c}}{\partial\theta_\alpha\partial\theta_\beta}\cdot\mathbf{\hat{n}}\\
    \kappa^\prime_{\alpha\beta} &= \frac{\partial^2\mathbf{v}}{\partial\theta_\alpha\partial\theta_\beta}\cdot\mathbf{\hat{n}} + \frac{\partial^2\mathbf{c}}{\partial\theta_\alpha\partial\theta_\beta}\cdot\mathbf{\hat{n}}^\prime(\mathbf{u})\\
    \mathbf{\hat{n}}^\prime(\mathbf{v}) &= \mathbf{m}_{\mathbf{v}} - (\mathbf{\hat{n}}\cdot \mathbf{m}_{\mathbf{v}})\mathbf{\hat{n}} \\
    \mathbf{m}_{\mathbf{v}} &= \frac{1}{\vert \frac{\partial\mathbf{c}}{\partial\theta_1}\times \frac{\partial\mathbf{c}}{\partial\theta_2}\vert } \left( \frac{\partial\mathbf{v}}{\partial\theta_1}\times \frac{\partial\mathbf{c}}{\partial\theta_2} + \frac{\partial\mathbf{c}}{\partial\theta_1} \times \frac{\partial\mathbf{v}}{\partial\theta_2} \right)\\
    \varepsilon^{\prime\prime}_{\alpha\beta} &= \frac{\partial\mathbf{v}}{\partial\theta_\alpha}\cdot\frac{\partial\mathbf{w}}{\partial\theta_\beta}\\
    \kappa^{\prime\prime}_{\alpha\beta} &= \frac{\partial^2\mathbf{v}}{\partial\theta_\alpha\partial\theta_\beta}\cdot\mathbf{\hat{n}}^\prime(\mathbf{w}) + \frac{\partial^2\mathbf{w}}{\partial\theta_\alpha\partial\theta_\beta}\cdot\mathbf{\hat{n}}^\prime(\mathbf{v}) + \frac{\partial^2\mathbf{c}}{\partial\theta_\alpha\partial\theta_\beta}\cdot\mathbf{\hat{n}}^{\prime\prime}(\mathbf{v},\mathbf{w})\\
    \mathbf{\hat{n}}^{\prime\prime}(\mathbf{v},\mathbf{w}) &= \mathbf{m}_{\mathbf{v}}^\prime - ( \mathbf{m}_{\mathbf{v}}\cdot\mathbf{\hat{n}}^\prime(\mathbf{w}) + \mathbf{\hat{n}}\cdot\mathbf{m}_{\mathbf{v}}^\prime(\mathbf{w}) )\mathbf{\hat{n}} - ( \mathbf{\hat{n}}\cdot \mathbf{m}_{\mathbf{v}} )\mathbf{\hat{n}}^\prime(\mathbf{w})\\
    \mathbf{m}_{\mathbf{v}}^{\prime}(\mathbf{w}) &= \mathbf{m}_{\mathbf{vw}}-(\mathbf{n}\cdot\mathbf{m}_{\mathbf{w}})\mathbf{m}_{\mathbf{w}}\\
    \mathbf{m}_{\mathbf{vw}} &= \frac{1}{\vert \frac{\partial\mathbf{c}}{\partial\theta_1}\times \frac{\partial\mathbf{c}}{\partial\theta_2}\vert } \left( \frac{\partial\mathbf{v}}{\partial\theta_1}\times \frac{\partial\mathbf{w}}{\partial\theta_2} + \frac{\partial\mathbf{w}}{\partial\theta_1} \times \frac{\partial\mathbf{v}}{\partial\theta_2} \right)\\
    n_{\alpha\beta} &= t \mathcal{C}^{\alpha\beta\gamma\delta} \varepsilon_{\alpha\beta}\\
    n_{\alpha\beta}^\prime &= \mathcal{C}^{\alpha\beta\gamma\delta} \varepsilon_{\alpha\beta}^{\prime}\\
    m_{\alpha\beta} &= t \mathcal{C}^{\alpha\beta\gamma\delta} \kappa{\alpha\beta}\\
    m_{\alpha\beta}^\prime &= \mathcal{C}^{\alpha\beta\gamma\delta} \kappa_{\alpha\beta}^{\prime}
\f}

Here, \f$ t\f$ is the thickness of the shell and \f$ \mathcal{C}^{\alpha\beta\gamma\delta}\f$ is the material tensor (see [III] eq. 3.15).

\subsection klShell_Implementation Implementation
The Kirchhoff-Love shell is implemented in the gsThinShellAssembler class and the constitutive relations are included in separate classes based on gsMaterialMatrixBase.

\subsection klShell_Assembler The gsThinShellAssembler
The gsThinShellAssembler is a class that implements the \ref kirchhoff-Love_example and adds advanced functionalities. That is, the class uses the gsExprAssembler to assemble matrices and vectors for shell modelling. Key features of the class are:
- Geometric nonlinearities, loading nonlinearities and material nonlinearities (via the gsMaterialMatrixBase),
- Distributed loads, point loads and follower loads (nonlinear)
- Multipatch modelling by accepting the gsMappedBasis and gsMappedSpline

The expressions for the assembly of the system of equations are partially coming from gsExpressions (e.g. the jac_expr, the grad_expr) and shell-specific expressions are implemented in the \ref gsThinShellUtils.h. Furthermore, \ref gsThinShellFunctions.h contains a helper-class for plotting the stress field within the shell.

\subsection klShell_Materialmatrix The gsMaterialMatrixBase
The material relations are handled in separate classes, derived from gsMaterialMatrixBase. The material matrix generally behaves as a gsFunctionSet with implemented evaluation functions. The quantities that can be computed using material matrices are the thickness, the density, the (membrane/bending) stress, the force/moment through-thickness and principal stretches or stresses. Helper classes are employed to evaluate the stress or material tensor at a point or to find the integral over the thickness. The constitutive relations currently implemented are:
- Linear materials (Saint-Venant Kirchhoff) in gsMaterialMatrixLinear
- Linear laminates in gsMaterialMatrixComposite
- Nonlinear materials models (Neo-Hookean, Mooney-Rivlin and Ogden) via gsMaterialMatrix

To evaluate (the integral of) any material quantity, the following classes can be used:
- gsMaterialMatrixEval evaluates any quantity given a through-thickness coordinate,
- gsMaterialMatrixIntegral evaluates the through-thickness integral of quantity.

Helper functions for defining material matrices are provided in \ref getMaterialMatrix.h, which constructs a pointer to a material matrix based on a gsOptionsList

\subsection klShell_ExampleUse Use of the classes
Typically, the aforementioned classes are used by first defining a gsMaterialMatrix and passing this to a gsThinShellAssembler.

~~~~~
// Define the material matrix options
options.addInt("Material","Material model: (0): SvK | (1): NH | (2): NH_ext | (3): MR | (4): Ogden",0);
options.addInt("Implementation","Implementation: (0): Composites | (1): Analytical | (2): Generalized | (3): Spectral",1);
// Construct a material matrix pointer, for a matrix with geometric dimension DIM and T as a double type
gsMaterialMatrixBase<T> * materialMatrix = getMaterialMatrix<DIM,T>(mp,t,parameters,rho,options);

// Construct a gsThinShellAssembler class with geometric dimension DIM, T as double type and the flag BENDING to specify whether bending stiffness should be taken into account. The
gsThinShellAssemblerBase<real_t>* assembler;
assembler = new gsThinShellAssembler<DIM,T, BENDING>(
        geom,
        basis,
        boundary_conditions,
        force,
        materialMatrix);

// Call assembly routines:
assembler->assemble();
    // Stiffness matrix
gsSparseMatrix<T> K = assember->matrix();
    // External force vector
gsVector<T>       vector = assember->rhs();
    // Mass matrix
assembler->assembleMass();
gsSparseMatrix<T> M = assember->matrix();
    // Mass matrix lumped into a vector
assembler->assembleMass(true);
gsSparseMatrix<T> M = assember->rhs();
    // Jacobian
assembler->assembleMatrix(deformed_geometry);
gsSparseMatrix<T> K_NL = assember->matrix();
    // Residual
assembler->assembleVector(deformed_geometry);
gsVector<T>       R = assember->rhs();

~~~~~

\subsection klShell_Tutorials Tutorials

In the folder \c gsKLShell/tutorials, some tutorials are provided, explaining the use of the \ref gsKLShell module. The tutorials can be compiled using the target \c gsKLShell-tutorials. The available tutorials are:
1. \ref linear_shell
2. \ref nonlinear_shell

\subsection klShell_Examples Examples
Few examples are provided in this module
- \ref example_shell2D : simple 2D elasticity including nonlinear materials
- \ref example_shell3D : 3D shell examples including nonlinear materials
- \ref gsMaterialMatrix_test : simple file to demonstrate evaluation of material matrices



\subsection klShell_References References
[I] J. Kiendl, K.-U. Bletzinger, J. Linhard, and R. Wüchner, "Isogeometric shell analysis with Kirchhoff–Love elements," Comput. Methods Appl. Mech. Eng., vol. 198, no. 49–52, pp. 3902–3914, Nov. 2009.

[II] J. Kiendl, "Isogeometric analysis and shape optimal design of shell structures," Technische Universität München, 2011.

[III] A. Goyal, "Isogeometric Shell Discretizations for Flexible Multibody Dynamics," Technische Universität Kaiserslautern, 2015.

[IV] H. M. Verhelst, "Modelling Wrinkling Behaviour of Large Floating Thin Offshore Structures: An application of Isogeometric Structural Analysis for Post-Buckling Analyses," Delft University of Technology, 2019.

\subsection klShell_Publications Publications

[8] H. M. Verhelst, "Isogeometric Analysis of Wrinkling.", PhD Thesis, TU Delft, 2024

[7] H.M. Verhelst, A. Mantzaflaris, M. Möller, J.H. Den Besten, "Goal-Adaptive Meshing of Isogeometric Kirchhoff-Love Shells", Engineering with Computers, 2024

[6] H.M. Verhelst, J.H. Den Besten, M. Möller, "An adaptive parallel arc-length method", Computers & Structures, 2024

[5] H.M. Verhelst, P. Weinmüller, A. Mantzaflaris, T. Takacs, D. Toshniwal, "A comparison of smooth basis constructions for isogeometric analysis", Computer Methods in Applied Mechanics and Engineering, 2024

[4] A. Farahat, H.M. Verhelst, J. Kiendl, M. Kapl, "Isogeometric analysis for multi-patch structured Kirchhoff–Love shells", Computer Methods in Applied Mechanics and Engineering, 2023

[3] H.M. Verhelst, M. Möller, J.H. Den Besten, A. Mantzaflaris, M.L. Kaminski, "Stretch-based hyperelastic material formulations for isogeometric Kirchhoff–Love shells with application to wrinkling", Computer-Aided Design. 2021 Oct 1;139:103075.

[2] H.M. Verhelst, M. Möller, J.H. Den Besten, F.J. Vermolen, M.L. Kaminski, "Equilibrium Path Analysis Including Bifurcations with an Arc-Length Method Avoiding A Priori Perturbations", Numerical Mathematics and Advanced Applications ENUMATH 2019: European Conference, Egmond aan Zee, The Netherlands, September 30-October 4. Cham: Springer International Publishing, 2020.

[1] H.M. Verhelst, "Modelling Wrinkling Behaviour of Large Floating Thin Offshore Structures: An application of Isogeometric Structural Analysis for Post-Buckling Analyses.", MSc. Thesis, TU Delft, 2019.

\subsection klShell_Contact Contact
Author: Hugo Verhelst -- h.m.verhelst@tudelft.nl

*/

}
